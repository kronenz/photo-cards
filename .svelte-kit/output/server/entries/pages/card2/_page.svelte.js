import { c as create_ssr_component, a as subscribe, b as add_attribute, d as each, v as validate_component, e as escape } from "../../../chunks/ssr.js";
import { a as activeCard } from "../../../chunks/Card.svelte_svelte_type_style_lang.js";
const css$1 = {
  code: ".card-grid.svelte-18k9gb6{display:grid;grid-template-columns:1fr;grid-gap:50px 2vw;transform-style:preserve-3d;height:100%;width:95vw;margin:auto;padding:50px;position:relative}.card-grid.active.svelte-18k9gb6{z-index:99}@media screen and (min-width: 1200px){.card-grid.svelte-18k9gb6{grid-template-columns:1fr 1fr 1fr 1fr 1fr}}@media screen and (max-width: 1200px){ .card-grid > .card {--row:1;grid-column:1;grid-row:var(--row);transition:opacity 0.2s ease, transform 0.2s ease} .card-grid > .card:nth-child(1n) {position:relative;left:-100px;top:20px;z-index:calc(var(--card-scale) * 10 + 54);transform:translate3d(0, 0, 0.1px) rotateZ(-10deg);opacity:1} .card-grid > .card:nth-child(2n) {left:-50px;top:10px;z-index:calc(var(--card-scale) * 10 + 53);transform:translate3d(0, 0, 0.1px) rotateZ(-5deg);opacity:0.99} .card-grid > .card:nth-child(3n) {left:0px;top:0px;z-index:calc(var(--card-scale) * 10 + 52);transform:translate3d(0, 0, 0.1px) rotateZ(0deg);opacity:0.98} .card-grid > .card:nth-child(4n) {left:50px;top:10px;z-index:calc(var(--card-scale) * 10 + 51);transform:translate3d(0, 0, 0.1px) rotateZ(5deg);opacity:0.97} .card-grid > .card:nth-child(5n) {left:100px;top:20px;z-index:calc(var(--card-scale) * 10 + 50);transform:translate3d(0, 0, 0.1px) rotateZ(10deg);opacity:0.96} .card-grid > .card.interacting, .card-grid > .card.active {opacity:1} .card-grid > .card:nth-child(n+6):nth-child(-n+10) {grid-row:2} .card-grid > .card:nth-child(n+11):nth-child(-n+15) {grid-row:3} .card-grid > .card:nth-child(n+16):nth-child(-n+20) {grid-row:4} .card-grid > .card:nth-child(n+21):nth-child(-n+25) {grid-row:5} .card-grid > .card:nth-child(n+26):nth-child(-n+30) {grid-row:6} .card-grid > .card:nth-child(n+31) {grid-row:auto;grid-column:auto;transform:none!important;left:0!important;top:0!important}}@media screen and (min-width: 600px) and (max-width: 1200px){.card-grid.svelte-18k9gb6{max-width:420px;margin:auto} .card-grid > .card:nth-child(1n) {left:-100px;top:20px;transform:translate3d(0, 0, 0.1px) rotateZ(-10deg)} .card-grid > .card:nth-child(2n) {left:-50px;top:10px;transform:translate3d(0, 0, 0.1px) rotateZ(-5deg)} .card-grid > .card:nth-child(3n) {left:0px;top:0px;transform:translate3d(0, 0, 0.1px) rotateZ(0deg)} .card-grid > .card:nth-child(4n) {left:50px;top:10px;transform:translate3d(0, 0, 0.1px) rotateZ(5deg)} .card-grid > .card:nth-child(5n) {left:100px;top:20px;transform:translate3d(0, 0, 0.1px) rotateZ(10deg)}} .card-grid > .card.active {transform:translate3d(0, 0, 0.1px)!important}",
  map: '{"version":3,"file":"Cards_5c.svelte","sources":["Cards_5c.svelte"],"sourcesContent":["<script>\\n\\t\\n\\timport { activeCard } from \\"$stores/activeCard.js\\"; // activeCard 스토어를 가져옵니다.\\n\\t\\n\\tlet thisGrid; // 현재 그리드 요소를 참조할 변수를 선언합니다.\\n\\t\\n\\t$: active = thisGrid && thisGrid.contains( $activeCard ); // thisGrid가 존재하고 activeCard를 포함하면 active를 true로 설정합니다.\\n\\t\\n<\/script>\\n\\n<section \\n\\tclass=\\"card-grid\\" \\n\\tclass:active  \\n\\tbind:this={thisGrid} \\n>\\n\\n<slot />\\n\\n</section>\\n\\n<style>\\n\\t.card-grid {\\n\\t\\tdisplay: grid; /* 그리드 레이아웃을 사용합니다 */\\n\\t\\tgrid-template-columns: 1fr; /* 기본적으로 1열 그리드를 만듭니다 */\\n\\t\\tgrid-gap: 50px 2vw; /* 행간 50px, 열간 2vw의 간격을 설정합니다 */\\n\\t\\ttransform-style: preserve-3d; /* 3D 변환을 위한 스타일을 설정합니다 */\\n\\t\\theight: 100%; /* 그리드의 높이를 부모 요소의 100%로 설정합니다 */\\n\\t\\twidth: 95vw; /* 그리드의 너비를 부모 요소의 100%로 설정합니다 */\\n\\t\\tmargin: auto; /* 그리드를 수평 중앙에 배치합니다 */\\n\\t\\tpadding: 50px; /* 그리드 주변에 50px의 패딩을 추가합니다 */\\n\\t\\tposition: relative; /* 자식 요소의 위치 기준점이 됩니다 */\\n\\t}\\n\\t\\n\\t.card-grid.active {\\n\\t\\tz-index: 99; /* 활성화된 그리드를 다른 요소 위에 표시합니다 */\\n\\t}\\n\\t\\t\\n\\n\\t@media screen and (min-width: 1200px) {\\n\\t\\t.card-grid {\\n\\t\\t\\tgrid-template-columns: 1fr 1fr 1fr 1fr 1fr; /* 화면 너비가 1200px 이상일 때 5열 그리드로 변경합니다 */\\n\\t\\t}\\n\\t}\\n\\t\\n\\t@media screen and (max-width: 1200px) { /* 화면 너비가 1200px 이하일 때 적용되는 스타일을 정의합니다 */\\n\\t\\t\\n\\t\\t:global( .card-grid > .card ) {\\n\\t\\t\\t--row: 1; /* 기본 행 변수를 설정합니다 */\\n\\t\\t\\tgrid-column: 1; /* 모든 카드를 첫 번째 열에 배치합니다 */\\n\\t\\t\\tgrid-row: var(--row); /* 행 위치를 변수로 설정합니다 */\\n\\t\\t\\ttransition: opacity 0.2s ease, transform 0.2s ease; /* 불투명도와 변형에 0.2초의 전환 효과를 적용합니다 */\\n\\t\\t}\\n\\n\\t\\t:global( .card-grid > .card:nth-child(1n) ) {\\n\\t\\t\\tposition: relative; /* 상대적 위치 지정을 사용합니다 */\\n\\t\\t\\tleft: -100px; /* 왼쪽으로 100px 이동합니다 */\\n\\t\\t\\ttop: 20px; /* 위로 20px 이동합니다 */\\n\\t\\t\\tz-index: calc(var(--card-scale) * 10 + 54); /* z-index를 동적으로 계산합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(-10deg); /* 3D 변환과 -10도 회전을 적용합니다 */\\n\\t\\t\\topacity: 1; /* 완전히 불투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(2n) ) {\\n\\t\\t\\tleft: -50px; /* 왼쪽으로 50px 이동합니다 */\\n\\t\\t\\ttop: 10px; /* 위로 10px 이동합니다 */\\n\\t\\t\\tz-index: calc(var(--card-scale) * 10 + 53); /* z-index를 동적으로 계산합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(-5deg); /* 3D 변환과 -5도 회전을 적용합니다 */\\n\\t\\t\\topacity: 0.99; /* 약간 투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(3n) ) {\\n\\t\\t\\tleft: 0px; /* 원래 위치에 둡니다 */\\n\\t\\t\\ttop: 0px; /* 원래 위치에 둡니다 */\\n\\t\\t\\tz-index: calc(var(--card-scale) * 10 + 52); /* z-index를 동적으로 계산합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(0deg); /* 3D 변환을 적용하고 회전은 없습니다 */\\n\\t\\t\\topacity: 0.98; /* 약간 더 투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(4n) ) {\\n\\t\\t\\tleft: 50px; /* 오른쪽으로 50px 이동합니다 */\\n\\t\\t\\ttop: 10px; /* 위로 10px 이동합니다 */\\n\\t\\t\\tz-index: calc(var(--card-scale) * 10 + 51); /* z-index를 동적으로 계산합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(5deg); /* 3D 변환과 5도 회전을 적용합니다 */\\n\\t\\t\\topacity: 0.97; /* 더 투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(5n) ) {\\n\\t\\t\\tleft: 100px; /* 오른쪽으로 100px 이동합니다 */\\n\\t\\t\\ttop: 20px; /* 위로 20px 이동합니다 */\\n\\t\\t\\tz-index: calc(var(--card-scale) * 10 + 50); /* z-index를 동적으로 계산합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(10deg); /* 3D 변환과 10도 회전을 적용합니다 */\\n\\t\\t\\topacity: 0.96; /* 가장 투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card.interacting) ,\\n\\t\\t:global( .card-grid > .card.active ) {\\n\\t\\t\\topacity: 1; /* 상호작용 중이거나 활성화된 카드는 완전히 불투명하게 설정합니다 */\\n\\t\\t}\\n\\t\\t\\n\\t\\t:global( .card-grid > .card:nth-child(n+6):nth-child(-n+10) ) { grid-row: 2; } /* 6번째부터 10번째 카드를 2행에 배치합니다 */\\n\\t\\t:global( .card-grid > .card:nth-child(n+11):nth-child(-n+15) ) { grid-row: 3; } /* 11번째부터 15번째 카드를 3행에 배치합니다 */\\n\\t\\t:global( .card-grid > .card:nth-child(n+16):nth-child(-n+20) ) { grid-row: 4; } /* 16번째부터 20번째 카드를 4행에 배치합니다 */\\n\\t\\t:global( .card-grid > .card:nth-child(n+21):nth-child(-n+25) ) { grid-row: 5; } /* 21번째부터 25번째 카드를 5행에 배치합니다 */\\n\\t\\t:global( .card-grid > .card:nth-child(n+26):nth-child(-n+30) ) { grid-row: 6; } /* 26번째부터 30번째 카드를 6행에 배치합니다 */\\n\\t\\t:global( .card-grid > .card:nth-child(n+31) ) {\\n\\t\\t\\tgrid-row: auto; /* 31번째 이후의 카드는 자동으로 행을 배치합니다 */\\n\\t\\t\\tgrid-column: auto; /* 31번째 이후의 카드는 자동으로 열을 배치합니다 */\\n\\t\\t\\ttransform: none!important; /* 변형을 제거합니다 */\\n\\t\\t\\tleft: 0!important; /* 왼쪽 위치를 초기화합니다 */\\n\\t\\t\\ttop: 0!important; /* 위쪽 위치를 초기화합니다 */\\n\\t\\t}\\n\\n\\t}\\n\\t\\n\\t@media screen and (min-width: 600px) and (max-width: 1200px) { /* 화면의 너비가 600px 에서 1200px 사이일때 적용 */\\n\\t\\t.card-grid {\\n\\t\\t\\tmax-width: 420px; /* 그리드의 최대 너비를 420px로 제한합니다 */\\n\\t\\t\\tmargin: auto; /* 그리드를 수평 중앙에 배치합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(1n) ) {\\n\\t\\t\\tleft: -100px; /* 왼쪽으로 100px 이동합니다 */\\n\\t\\t\\ttop: 20px; /* 위로 20px 이동합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(-10deg); /* 3D 변환과 -10도 회전을 적용합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(2n) ) {\\n\\t\\t\\tleft: -50px; /* 왼쪽으로 50px 이동합니다 */\\n\\t\\t\\ttop: 10px; /* 위로 10px 이동합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(-5deg); /* 3D 변환과 -5도 회전을 적용합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(3n) ) {\\n\\t\\t\\tleft: 0px; /* 원래 위치에 둡니다 */\\n\\t\\t\\ttop: 0px; /* 원래 위치에 둡니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(0deg); /* 3D 변환을 적용하고 회전은 없습니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(4n) ) {\\n\\t\\t\\tleft: 50px; /* 오른쪽으로 50px 이동합니다 */\\n\\t\\t\\ttop: 10px; /* 위로 10px 이동합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(5deg); /* 3D 변환과 5도 회전을 적용합니다 */\\n\\t\\t}\\n\\t\\t:global( .card-grid > .card:nth-child(5n) ) {\\n\\t\\t\\tleft: 100px; /* 오른쪽으로 100px 이동합니다 */\\n\\t\\t\\ttop: 20px; /* 위로 20px 이동합니다 */\\n\\t\\t\\ttransform: translate3d(0, 0, 0.1px) rotateZ(10deg); /* 3D 변환과 10도 회전을 적용합니다 */\\n\\t\\t}\\n\\t}\\n\\n\\t:global( .card-grid > .card.active ) {\\n\\t\\ttransform: translate3d(0, 0, 0.1px)!important; /* 활성화된 카드의 변형을 초기화합니다 */\\n\\t}\\n\\t\\n</style>\\n"],"names":[],"mappings":"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"}'
};
const Cards_5c = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let active;
  let $$unsubscribe_activeCard;
  $$unsubscribe_activeCard = subscribe(activeCard, (value) => value);
  let thisGrid;
  $$result.css.add(css$1);
  active = thisGrid;
  $$unsubscribe_activeCard();
  return `<section class="${["card-grid svelte-18k9gb6", active ? "active" : ""].join(" ").trim()}"${add_attribute("this", thisGrid, 0)}>${slots.default ? slots.default({}) : ``} </section>`;
});
const css = {
  code: ".back-to-top.svelte-4fwl46 a.svelte-4fwl46{color:inherit;text-decoration:none;z-index:999}.button-container.svelte-4fwl46.svelte-4fwl46{display:flex;justify-content:space-around;margin:10px 0}.modern-button.svelte-4fwl46.svelte-4fwl46{background-color:#a3d0f5;color:#333;border:none;padding:10px 20px;font-size:16px;border-radius:8px;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);transition:all 0.3s ease;cursor:pointer}.modern-button.svelte-4fwl46.svelte-4fwl46:hover{background-color:#86c1f2;transform:translateY(-2px);box-shadow:0 6px 8px rgba(0, 0, 0, 0.15)}.modern-button.svelte-4fwl46.svelte-4fwl46:active{background-color:#5c5c5c;color:#ffffff;transform:translateY(0);box-shadow:0 2px 4px rgba(0, 0, 0, 0.1)}.card-wrapper.svelte-4fwl46.svelte-4fwl46{transition:transform 0.6s, opacity 0.6s;transform-style:preserve-3d}.modern-dropdown.svelte-4fwl46.svelte-4fwl46{background-color:#a3d0f5;color:#333;border:none;padding:10px;font-size:16px;border-radius:8px;box-shadow:0 4px 6px rgba(0, 0, 0, 0.1);transition:all 0.3s ease;cursor:pointer}.modern-dropdown.svelte-4fwl46.svelte-4fwl46:hover{background-color:#86c1f2}.button-dropdown-container.svelte-4fwl46.svelte-4fwl46{display:flex;align-items:center}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from \\"svelte\\";\\n    import { flip } from 'svelte/animate';\\n    import { cubicOut } from 'svelte/easing';\\n  \\n    import CardList from \\"$lib/components/Cards_5c.svelte\\";\\n    import Card from \\"$lib/components/CardProxy.svelte\\";\\n    import cardsData from '$data/cards2.json';\\n\\n    let query = \\"\\";\\n    let isLoading = true;\\n    let isRotated = false;\\n    let selectedCardStyle = \\"showcase\\";\\n\\n    let cardCategories = [\\n        'showcase', 'basics', 'reverse', 'holos', 'cosmos', 'amazings', 'radiant', 'basicGallery',\\n        'vee', 'veeUltra', 'veeAlt', 'veeMax', 'veeMaxAlt', 'veeStar',\\n        'trainerHolo', 'rainbow', 'gold', 'veeGallery', 'shinyVault'\\n    ];\\n\\n    const cardStyles = {\\n        showcase: [],\\n        basics: [],\\n        reverse: [],\\n        holos: [],\\n        cosmos: [],\\n        amazings: [],\\n        radiant: [],\\n        basicGallery: [],\\n        vee: [],\\n        veeUltra: [],\\n        veeAlt: [],\\n        veeMax: [],\\n        veeMaxAlt: [],\\n        veeStar: [],\\n        trainerHolo: [],\\n        rainbow: [],\\n        gold: [],\\n        veeGallery: [],\\n        shinyVault: []\\n    };\\n    let cardlist = {};\\n\\n    const getCards = async () => {\\n        let cards = cardsData;\\n        return cards;\\n    };\\n\\n    const loadCards = async() => {\\n        return getCards()\\n            .then((cards) => {\\n                window.cards = cards; \\n                cardlist = cards.slice(0, 10);\\n                isLoading = false;\\n            });\\n    };\\n\\n    let rotationDegree = 360;\\n\\n    const handleRotationChange = (event) => {\\n        rotationDegree = parseInt(event.target.value);\\n    };\\n\\n    const rotateCards = () => {\\n        document.querySelectorAll('.card').forEach(card => {\\n            card.style.transform = \`rotateY(\${rotationDegree}deg)\`;\\n            card.style.transition = \`transform 2s ease\`;\\n        });\\n    };\\n\\n    const shuffleCards = () => {\\n        cardlist = [...cardlist].sort(() => Math.random() - 0.5);\\n    };\\n\\n    const changeCardStyle = (event) => {\\n        // 선택된 카드 스타일을 업데이트합니다.\\n        selectedCardStyle = event.target.value;\\n\\n        // 주의: eval() 사용은 권장되지 않습니다. \\n        // 더 안전한 방법으로는 객체를 사용하여 카드 스타일을 매핑하는 것이 좋습니다.\\n        // 예: const cardStyles = { basics: basics, reverse: reverse, ... };\\n        //cardlist = cardStyles[selectedCardStyle] || cardlist;\\n    };\\n\\n    const applyCardStyle = () => {\\n        isLoading = true;\\n        cardlist = cardlist.map(card => ({\\n            ...card,\\n            subtypes: [selectedCardStyle]\\n        }));\\n        setTimeout(() => {\\n            isLoading = false;\\n        }, 500);\\n\\n        console.log('현재 cardlist:', cardlist);\\n        console.log('선택된 카드 스타일:', selectedCardStyle);\\n    };\\n\\n    onMount(() => {\\n        loadCards(); // 카드 데이터를 로드합니다.\\n    });\\n<\/script>\\n\\n<main>\\n    <header>\\n        <h1 id=\\"⚓-top\\">KBO 야구카드 <sup>Beta V0.1</sup></h1>\\n    </header>\\n  \\n    <section>\\n    <div class=\\"button-container\\">\\n        <div class=\\"button-group\\">\\n            <div class=\\"button-dropdown-container\\">\\n                <button class=\\"modern-button\\" on:click={rotateCards}>회전</button>\\n                <select class=\\"modern-dropdown\\" on:change={handleRotationChange}>\\n                    <option value=\\"360\\">1바퀴 (360°)</option>\\n                    <option value=\\"720\\">2바퀴 (720°)</option>\\n                    <option value=\\"1080\\">3바퀴 (1080°)</option>\\n                    <option value=\\"1440\\">4바퀴 (1440°)</option>\\n                </select>\\n            </div>\\n        </div>\\n        <div class=\\"button-group\\">\\n            <button class=\\"modern-button\\" on:click={shuffleCards}>셔플</button>\\n        </div>\\n        <div class=\\"button-group\\">\\n            <button class=\\"modern-button\\" on:click={applyCardStyle}>스타일 적용</button>\\n            <select class=\\"modern-dropdown\\" on:change={changeCardStyle}>\\n                {#each cardCategories as category}\\n                    <option value={category}>{category}</option>\\n                {/each}\\n            </select>\\n        </div>\\n    </div>\\n    </section>\\n    {#if query.length < 3}\\n        <CardList>\\n            {#if isLoading}\\n                loading...\\n            {:else}\\n                {#each cardlist as card, index (card.id)}\\n                    <div class=\\"card-wrapper\\" animate:flip={{ duration: 500, easing: cubicOut }}>\\n                      <Card\\n                          id={card.id}\\n                          name={card.name}\\n                          img={card.image}\\n                          number={card.number}\\n                          set={card.set}\\n                          types={card.types}\\n                          supertype={card.supertype}\\n                          subtypes={card.subtypes}\\n                          rarity={card.rarity}\\n                      />\\n                    </div>\\n                {/each}\\n            {/if}\\n        </CardList>\\n    {/if}\\n</main>\\n\\n<div class=\\"back-to-top\\">\\n  <a href=\\"#⚓-top\\">Back to Top</a>\\n</div>\\n\\n<style>\\n  .back-to-top a {\\n    color: inherit;\\n    text-decoration: none;\\n    z-index: 999;\\n  }\\n\\n  .button-container {\\n      display: flex;\\n      justify-content: space-around;\\n      margin: 10px 0;\\n  }\\n\\n  .modern-button {\\n      background-color: #a3d0f5;\\n      color: #333;\\n      border: none;\\n      padding: 10px 20px;\\n      font-size: 16px;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      transition: all 0.3s ease;\\n      cursor: pointer;\\n  }\\n\\n  .modern-button:hover {\\n      background-color: #86c1f2;\\n      transform: translateY(-2px);\\n      box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);\\n  }\\n\\n  .modern-button:active {\\n      background-color: #5c5c5c;\\n      color: #ffffff;\\n      transform: translateY(0);\\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n  }\\n\\n  .card-wrapper {\\n      transition: transform 0.6s, opacity 0.6s; /* 변형과 불투명도에 0.6초의 전환 시간을 적용합니다 */\\n      transform-style: preserve-3d; /* 3D 변환 스타일을 유지합니다 */\\n  }\\n\\n  /* \\n  이 CSS 클래스는 카드 래퍼에 적용되며 다음과 같은 기능을 합니다:\\n  1. 변형(transform)과 불투명도(opacity) 속성에 대해 부드러운 전환 효과를 제공합니다.\\n  2. 3D 변환을 위한 환경을 설정하여 카드가 3D 공간에서 회전할 수 있게 합니다.\\n  이는 카드 뒤집기 애니메이션과 셔플 효과를 구현할 때 유용합니다.\\n  */\\n\\n  .modern-dropdown {\\n      background-color: #a3d0f5;\\n      color: #333;\\n      border: none;\\n      padding: 10px;\\n      font-size: 16px;\\n      border-radius: 8px;\\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n      transition: all 0.3s ease;\\n      cursor: pointer;\\n  }\\n\\n  .modern-dropdown:hover {\\n      background-color: #86c1f2;\\n  }\\n\\n  .button-dropdown-container {\\n      display: flex;\\n      align-items: center;\\n  }\\n\\n</style>"],"names":[],"mappings":"AAoKE,0BAAY,CAAC,eAAE,CACb,KAAK,CAAE,OAAO,CACd,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,GACX,CAEA,6CAAkB,CACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,CAC7B,MAAM,CAAE,IAAI,CAAC,CACjB,CAEA,0CAAe,CACX,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CACzB,MAAM,CAAE,OACZ,CAEA,0CAAc,MAAO,CACjB,gBAAgB,CAAE,OAAO,CACzB,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAC5C,CAEA,0CAAc,OAAQ,CAClB,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,WAAW,CAAC,CAAC,CACxB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAC3C,CAEA,yCAAc,CACV,UAAU,CAAE,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CACxC,eAAe,CAAE,WACrB,CASA,4CAAiB,CACb,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACxC,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CACzB,MAAM,CAAE,OACZ,CAEA,4CAAgB,MAAO,CACnB,gBAAgB,CAAE,OACtB,CAEA,sDAA2B,CACvB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MACjB"}`
};
let query = "";
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let cardCategories = [
    "showcase",
    "basics",
    "reverse",
    "holos",
    "cosmos",
    "amazings",
    "radiant",
    "basicGallery",
    "vee",
    "veeUltra",
    "veeAlt",
    "veeMax",
    "veeMaxAlt",
    "veeStar",
    "trainerHolo",
    "rainbow",
    "gold",
    "veeGallery",
    "shinyVault"
  ];
  $$result.css.add(css);
  return `<main><header data-svelte-h="svelte-hkuy4a"><h1 id="⚓-top">KBO 야구카드 <sup>Beta V0.1</sup></h1></header> <section><div class="button-container svelte-4fwl46"><div class="button-group"><div class="button-dropdown-container svelte-4fwl46"><button class="modern-button svelte-4fwl46" data-svelte-h="svelte-1pafba5">회전</button> <select class="modern-dropdown svelte-4fwl46"><option value="360" data-svelte-h="svelte-20bh4a">1바퀴 (360°)</option><option value="720" data-svelte-h="svelte-1s038wh">2바퀴 (720°)</option><option value="1080" data-svelte-h="svelte-162evvs">3바퀴 (1080°)</option><option value="1440" data-svelte-h="svelte-18n7ey9">4바퀴 (1440°)</option></select></div></div> <div class="button-group"><button class="modern-button svelte-4fwl46" data-svelte-h="svelte-1dr91ut">셔플</button></div> <div class="button-group"><button class="modern-button svelte-4fwl46" data-svelte-h="svelte-q30w20">스타일 적용</button> <select class="modern-dropdown svelte-4fwl46">${each(cardCategories, (category) => {
    return `<option${add_attribute("value", category, 0)}>${escape(category)}</option>`;
  })}</select></div></div></section> ${query.length < 3 ? `${validate_component(Cards_5c, "CardList").$$render($$result, {}, {}, {
    default: () => {
      return `${`loading...`}`;
    }
  })}` : ``}</main> <div class="back-to-top svelte-4fwl46" data-svelte-h="svelte-1er9s0m"><a href="#⚓-top" class="svelte-4fwl46">Back to Top</a> </div>`;
});
export {
  Page as default
};
